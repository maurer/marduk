flow_enable(bool)
flow_in(Loc, PointsTo^pts_merge)
flow_out(Loc, PointsTo)

fan_in(Loc, usize)
pred(Loc, LocSet^loc_merge)
succ_swap: pred(dst, src_promoted) <- succ_over{src, dst} + ::flow::promote_loc
fan_in_count@6: fan_in(loc, count) <- ~pred(loc, preds) + ::flow::count
succ_one {src: Loc, dst: Loc}
succ_one_by_fanin: succ_one {src, dst} <- succ {src, dst, is_call: ~false} & fan_in(dst, ~(1))

fused_effect {call_loc: Loc, ret_loc: Loc, effect: Effect}

fuse_effect@6: fused_effect {call_loc, ret_loc, effect} <- call_site {call_loc, ret_loc, target_loc} & ~func_effect(target_loc, effect)

pred_init@7: flow_in(loc, pts) <- uncalled { loc } & flow_enable(~true) + ::flow::base_pts
pred_init_entry@7: flow_in(loc, pts) <- sym {loc} & flow_enable(~true) + ::flow::empty_pts
pred_flow_skip@8: flow_in(dst, pts) <- flow_out(src, pts) & succ_one {src, dst}
pred_flow@9: flow_in(dst, pts) <- flow_out(src, pts) & succ {src, dst, is_call: ~false}
pred_call_over@9: flow_in(dst, pts2) <- flow_out(src, pts) & fused_effect {call_loc: src, ret_loc: dst, effect} + ::effect::update_pts
// Delay pred_call due to relatively high fan-in of callsites
// It's important that we use flow_in rather than flow_out here, so that the killset for calls can actually kill caller saved registers
pred_call@10: flow_in(dst, pts2) <- flow_in(src, pts) & succ_call {src, dst} + ::flow::stack_purge
pred_ret@9: flow_in(dst, pts2) <- flow_out(src, pts) & succ_ret {src, dst} & func {base, contains: dst} + ::flow::dyn_clear
// MORE FUSE
fxs {
  loc: Loc,
  cs: Constraints,
  vars: Vars
}
fxs_def@6: fxs {loc, cs, vars} <- constraint(loc, cs) & kill(loc, ks) & ~live_vars{loc, vars}
flow_xfer@7: flow_out(loc, pts2) <- flow_in(loc, pts) & constraint(loc, cs) & kill(loc, ks) & ~live_vars{loc, vars} + ::flow::xfer
